const measureWidth = (item) => {
    let reqItemWidth = 0;
    
    
    const screenWidth = $(window).width();
    const list = item.closest(".products-menu");
    const items = $(".products-menu__item")
    
    
    const titleBlocks = list.find(".products-menu__title");
    const titleWidth = titleBlocks.width();
    
    const isTablet = window.matchMedia('(max-width: 768px)').matches;
    const isPhone = window.matchMedia('(max-width: 480px)').matches;
    
    const textContainer = item.find(".products-menu__container");
    const paddingLeft = parseInt(textContainer.css('padding-left'));
    const paddingRight = parseInt(textContainer.css('padding-right'));
    
    const itemNumber = items.index(item) + 1;
    
    if (isPhone) {
        reqItemWidth = screenWidth - titleWidth;
        let left = titleWidth * (titleBlocks.length - itemNumber);
        item.css({ "left": left });
    }
    else if (isTablet) {
        reqItemWidth = screenWidth - titleWidth * titleBlocks.length;
    }
    else {
    
        reqItemWidth = ((screenWidth * 0.5) - titleWidth * titleBlocks.length) > 530
        ? 530
        : (screenWidth * 0.5) - titleWidth;
    }
    
    return {
        container: reqItemWidth,
        textContainer: reqItemWidth - paddingLeft - paddingRight,
    }
    }
    
    const closeEveryAccoItem = list => {
    const items = list.find(".products-menu__item");
    const content = list.find(".products-menu__content");
    
    items.css({ "left": 0 });
    
    items.removeClass('active');
    content.width(0);
    }
    
    const openAccoItem = (item) => {
    const content = item.find(".products-menu__content");
    const reqWidth = measureWidth(item);
    const textBlock = item.find(".products-menu__container")
    
    item.addClass('active')
    
    content.width(reqWidth.container);
    
    textBlock.width(reqWidth.textContainer);
    }
    
    $(".products-menu__title").on('click', (e) => {
    e.preventDefault();
    const target = $(e.currentTarget);
    const item = target.closest(".products-menu__item");
    const content = item.find(".products-menu__content");
    const container = content.find(".products-menu__container");
    const list = $(".products-menu");
    const isOpened = item.hasClass('active')
    
    if (isOpened) {
        closeEveryAccoItem(list);
    }
    else {
        closeEveryAccoItem(list);
        openAccoItem(item);
    }
    })
    
    $(".products-menu__close").on('click', (e) => {
    e.preventDefault();
    closeEveryAccoItem($(".products-menu"));
    })
const slider = $(".slider__list").bxSlider({
    pager: false,
    controls: false,
});

$(".arrow--left").click((e) => {
    e.preventDefault();
    slider.goToPrevSlide();
});

$(".arrow--right").click((e) => {
    e.preventDefault();
    slider.goToNextSlide();
});
const validateFilds = (form, fieldArray) => {

    fieldArray.forEach(field => {
        field.removeClass("input-error");
        if (field.val().trim() === "") {
            field.addClass("input-error");
        }
    });

    const errorFields = form.find(".input-error")

    return errorFields.length === 0;
}
$('.form').submit(e => {
    e.preventDefault();

    const form = $(e.currentTarget);
    const name = form.find("[name='name']");
    const phone = form.find("[name='phone']");
    const comment = form.find("[name='comment']");
    const to = form.find("[name='to']");

    const modal = $("#modal");
    const content = modal.find(".modal__content");

    modal.removeClass("error-modal");

    const isValid = validateFilds(form, [name, phone, comment, to]);

    if (isValid) {
        const request = $.ajax({
            url: "https://webdev-api.loftschool.com/sendmail",
            method: "post",
            data: {
                name: name.val(),
                phone: phone.val(),
                comment: comment.val(),
                to: to.val(),
            },
        });

        request.done((data) => {
            content.text(data.message)
            $('form').trigger('reset');
        });

        request.fail((data) => {
            const message = data.responseJSON.message;
            content.text(message);
            modal.addClass("error-modal");
        })

        request.always(() => {
            $.fancybox.open ({
                src: "#modal",
                type: "inline",
            });
        })
    }
});

$(".app-submit-modal").click((e) => {
    e.preventDefault();
    $.fancybox.close();
});

$('form input[type="text"], form input[type="password"], form textarea').val('');
const hamburger_btn = document.querySelector('#hamburger-menu__link');
const hamburger_menu = document.querySelector('.menu--fixed');

    hamburger_btn.addEventListener('click', function(e) {
    e.preventDefault();

    let className = hamburger_btn.getAttribute('class');

    if (className == 'hamburger-menu__link') {
        hamburger_menu.classList.add('menu--active');
        hamburger_btn.classList.add('hamburger-menu__link--active');

        let body = document.getElementsByTagName('body')[0];
        body.style.overflow = "hidden";}
        
    else  {
        hamburger_menu.classList.remove('menu--active');
        hamburger_btn.classList.remove('hamburger-menu__link--active');

        let body = document.getElementsByTagName('body')[0];
        body.style.overflow = "visible";}
});

$('.menu__link').on('click', () => {
    $('.menu--fixed').removeClass('menu--active');
    $('#hamburger-menu__link').removeClass('hamburger-menu__link--active');
    
    let body = document.getElementsByTagName('body')[0];
    body.style.overflow = "visible";
});
  let myMap;

const init = () => {
  myMap = new ymaps.Map("map", {
    center: [55.668858, 37.869488],
    zoom: 13,
    controls: []
  });

  const coords =  [
    [55.674183, 37.858218],
    [55.684438, 37.855377],
    [55.654310, 37.846526],
    [55.661432, 37.879501]
  ];

  const myCollection = new ymaps.GeoObjectCollection({}, {
    draggable: false,
    iconLayout: 'default#image',
    iconImageHref: "./img/icons/marker.svg",
    iconImageSize: [46, 57],
    iconImageOffset: [-35, -52]
  });

  coords.forEach(coord => {
    myCollection.add(new ymaps.Placemark(coord));
  });

  myMap.geoObjects.add(myCollection);

  myMap.behaviors.disable('scrollZoom');
}

ymaps.ready(init); 
const sections = $('section');
const display = $('.maincontent');
const sideMenu = $(".fixed-menu");
const menuItems = sideMenu.find(".fixed-menu__item");

const mobileDetect = new MobileDetect(window.navigator.userAgent);
const isMobile = mobileDetect.mobile();

let inScroll = false;

sections.first().addClass("active");

const contSectionPosition = (sectionEq) => {
    const position = sectionEq * -100;
    
    if (isNaN(position)) {
        console.error("Передано не ыерное значение в contSectionPosition");
        return 0;
    }

    return position;
};

const changeMenuThemeForSection = sectionEq => {
    const currentSection = sections.eq(sectionEq);
    const menuTheme = currentSection.attr("data-sidemenu-theme");
    const activeClass = "fixed-menu--shadowed";

    if (menuTheme === "black") {
        sideMenu.addClass(activeClass);
    } else {
        sideMenu.removeClass(activeClass);
    }
};

const resetActiveClassForItem = (items, itemEq, activeClass) => {
    items.eq(itemEq).addClass(activeClass).siblings().removeClass(activeClass);
}

const performTransition = (sectionEq) => {
    if (inScroll) return;

    const transitionOver = 1000;
    const mouseInertionOver = 300;

    inScroll = true;

    const position = contSectionPosition(sectionEq);

    changeMenuThemeForSection(sectionEq);
    
    display.css({
        transform: `translateY(${position}%)`,
    });

    resetActiveClassForItem(sections, sectionEq, "active");

    setTimeout(() => {
    inScroll = false;  
    resetActiveClassForItem(menuItems, sectionEq, "fixed-menu__item--active");
    }, transitionOver + mouseInertionOver);
};

const viewportScroller = () => {
    const activeSection = sections.filter(".active");
    const nextSection = activeSection.next();
    const prevSection = activeSection.prev();

    return {
        next() {
            if (nextSection.length) {
                performTransition(nextSection.index());
            }
        },
        prev() {
            if (prevSection.length) {
                performTransition(prevSection.index());
            }
        },
    };
};

$(window).on("wheel", (e) => {
    const deltaY = e.originalEvent.deltaY;
    const scroller = viewportScroller();

    if (deltaY > 0) {
        scroller.next(); 
    }

    if (deltaY < 0) {
        scroller.prev(); 
    }
});

$(window).on("keydown", (e) => {
    const tagName = e.target.tagName.toLowerCase();
    const userTypingInInputs = tagName === "input" || tagName === "textarea";
    const scroller = viewportScroller();

    if (userTypingInInputs) return;

    switch (e.keyCode) {
        case 38: //PREV
            scroller("prev"); 
            break;

        case 40: //NEXT
            scroller("next"); 
            break;
    }
});

$(".wrapper").on("touchmove", (e) => e.preventDefault());

$("[data-scroll-to]").click((e) => {
    e.preventDefault();

    const $this = $(e.currentTarget);
    const target = $this.attr("data-scroll-to");
    const reqSection = $(`[data-section-id=${target}]`);

    performTransition(reqSection.index());
});

if (isMobile) {
    $("body").swipe({
        swipe: function (event, direction) {
          const scroller = viewportScroller();
          let scrollDirection = "";
    
          if (direction == "up") scrollDirection = "next";
          if (direction == "down") scrollDirection = "prev";
    
          scroller[scrollDirection]();
        },
      });
};
const btnPlay = document.querySelector('.btn-play');
const videoPlayer = document.querySelector('.video__player');


// Плей-Пауза

const togglePlay = () => {
    if (videoPlayer.paused || videoPlayer.ended) {
        videoPlayer.play(); 
        $('.btn-play__icon').css('display', 'none');
        $('.btn-pause__icon').css('display', 'block');
    } else {
        videoPlayer.pause();
       $('.btn-play__icon').css('display', 'block');
        $('.btn-pause__icon').css('display', 'none');
    }
};

$(videoPlayer).on('click', togglePlay);
$(btnPlay).on('click', togglePlay);
$('.btn-play--big').on('click', togglePlay);

// Управление воспромзведением видео

  $(".video__cursor").on("click", e => {
    const bar = $(e.currentTarget);
    const clickedPosition = e.originalEvent.layerX;
    const newPlaybackPositionSec = videoPlayer.duration * clickedPosition / bar.width();

    videoPlayer.currentTime = newPlaybackPositionSec;
  });

  videoPlayer.ontimeupdate = function () {
    const durationSec = videoPlayer.duration;
    const completedSec = videoPlayer.currentTime;
    const completedPercent = (completedSec / durationSec) * 100;

    $(".video__cursor-btn").css({
      left: `${completedPercent}%`
    });
  };

// Управление громкостью звука

  $(".video__volume").on("click", e => {
    const bar = $(e.currentTarget);
    const clickedPosition = e.originalEvent.layerX;

    videoPlayer.volume = clickedPosition / bar.width();
  });

  videoPlayer.onvolumechange = () => {
    const currentVolume = videoPlayer.volume;
    const newButtonPositionPercent = currentVolume * 100;

    $(".video__volume-button").css({
      left: `${newButtonPositionPercent}%`
    });
  };

// Без звука 

  $('.btn-volume').on('click', function () {

    if (videoPlayer.volume > 0) {
        videoPlayer.volume = 0;
        $('.btn-volume__line').css('display', 'block');
    } else {
        videoPlayer.volume = 1;
       $('.btn-volume__line').css('display', 'none');
  }
});
const ctrlList = document.querySelector('.reviews__switcher');
const ctrlItems = document.querySelectorAll('.interactive-avatar');
const reviewItems = document.querySelectorAll('.reviews__display-inner');


[].forEach.call(ctrlItems, (el) => {
    el.addEventListener('click', (e) => {
        e.preventDefault();
        let ctrlItem = e.target.closest('li');

        for (let i = 0; i < ctrlItems.length; i++) {
            ctrlItems[i].classList.remove('interactive-avatar--active');
    
            if (ctrlItems[i] === ctrlItem) {
                reviewItems[i].classList.add('reviews__display-inner--active');
                
            } else {
                reviewItems[i].classList.remove('reviews__display-inner--active');
            }
        }
        ctrlItem.classList.add('interactive-avatar--active');

    })
});
const teamItems = document.querySelectorAll('.team__item');

[].forEach.call(teamItems, function(el) {
    el.addEventListener('click', function() {

        if (!el.classList.contains('team__item--active')) {
            for (let i = 0; i < teamItems.length; i++) {
                teamItems[i].classList.remove('team__item--active')
            }
            el.classList.add('team__item--active');
        } else {
            el.classList.remove('team__item--active');
        }
    });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
